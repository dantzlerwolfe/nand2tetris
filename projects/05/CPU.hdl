// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Registers
    And(a=instruction[15], b=instruction[5], out=loadALoop);
    Mux16(a=instruction, b=loopToA, sel=loadALoop, out=muxToA);
    Not(in=instruction[15], out=aInstr, out=aInstr1);
    Or(a=aInstr, b=loadALoop, out=loadA);
    ARegister(in=muxToA, load=loadA, 
        out=AtoMux, 
        out=AtoPC,
        out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadDLoop);
    DRegister(in=loopToD, load=loadDLoop, out=outD);

    // Jump Instruction and Program Counter
    Xor(a=zr, b=ng, out=outLE, out=outLE1);
    Not(in=outLE, out=outGT, out=outGT1);
    Xor(a=zr1, b=outGT, out=outGE);
    Not(in=zr3, out=outNE);
    Mux8Way(a=false, b=outGT1, c=zr2, d=outGE, 
            e=ng1, f=outNE, g=outLE1, h=true,
            sel=instruction[0..2], out=muxToLoad);
    Mux(a=false, b=muxToLoad, sel=instruction[15], out=loadOut);
    PC(in=AtoPC, load=loadOut, inc=true, reset=reset, out[0..14]=pc);
   
    // ALU
    Mux16(a=AtoMux, b=inM, sel=instruction[12], out=outAM);
    ALU(x=outD, y=outAM, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=loopToA,
        out=loopToD,
        zr=zr,
        zr=zr1,
        zr=zr2,
        zr=zr3,
        ng=ng,
        ng=ng1);

    // Write M?
    And(a=instruction[15], b=instruction[3], out=writeM);
}
