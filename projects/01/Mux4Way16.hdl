// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // selection codes
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    And(a=notSel0, b=notSel1, out=selectA);
    And(a=notSel0, b=sel[1], out=selectB);
    And(a=sel[0], b=notSel1, out=selectC);
    And(a=sel[0], b=sel[0], out=selectD);

    // 1st Attempt (fail) - Articulate each output. 
    /*
      PROBLEM: HDL WILL NOT AUTOMATICALLY PLACE selectA on EACH PIN OF THE INPUT 
      BUS. WE HAVE TO "PHYSICALLY" DO IT OURSELVES.)
      And16(a[0..15]=a[0..15], b[0..15]=selectA, out[0..15]=aOut);
      And16(a[0..15]=b[0..15], b[0..15]=selectB, out[0..15]=bOut);
      And16(a[0..15]=c[0..15], b[0..15]=selectC, out[0..15]=cOut);
      And16(a[0..15]=d[0..15], b[0..15]=selectD, out[0..15]=dOut);
    */

    // Pipe outputs. Only the selected one will make it through the pipe.
    /*
    Or16(a[0..15]=aOut[0..15], b[0..15]=bOut[0..15], out[0..15]=pipe1);
    Or16(a[0..15]=pipe1[0..15], b[0..15]=cOut[0..15], out[0..15]=pipe2);
    Or16(a[0..15]=pipe2[0..15], b[0..15]=dOut[0..15], out[0..15]=out[0..15]);
    */

    // 2nd Attempt - Use Mux16 to pipe the outputs.
    Mux16(a[0..15]=a[0..15], b[0..15]=b[0..15], sel=selectB, out[0..15]=pipe1);
    Mux16(a[0..15]=pipe1, b[0..15]=c[0..15], sel=selectC, out[0..15]=pipe2);
    Mux16(a[0..15]=pipe2, b[0..15]=d[0..15], sel=selectD, out[0..15]=out[0..15]);
}