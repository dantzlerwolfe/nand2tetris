// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // selection codes (THESE ARE WRONG. The indices increase with the significant
    // figure. So sel[0] corresponds to the right hand digit in 01 (i.e. sel[0]
    // = 1))
    /*
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    And(a=notSel0, b=notSel1, out=selectA);
    And(a=notSel0, b=sel[1], out=selectB);
    And(a=sel[0], b=notSel1, out=selectC);
    And(a=sel[0], b=sel[1], out=selectD);
    */

    // better selection codes
    Not(in=sel[1], out=notSel1);
    Not(in=sel[0], out=notSel0);
    And(a=notSel1, b=notSel0, out=selectA);
    And(a=notSel1, b=sel[0], out=selectB);
    And(a=sel[1], b=notSel0, out=selectC);
    And(a=sel[1], b=sel[0], out=selectD);

    // 2nd Attempt - Use Mux16 to pipe the outputs.
    Mux16(a[0..15]=a[0..15], b[0..15]=b[0..15], sel=selectB, out[0..15]=pipe1);
    Mux16(a[0..15]=pipe1, b[0..15]=c[0..15], sel=selectC, out[0..15]=pipe2);
    Mux16(a[0..15]=pipe2, b[0..15]=d[0..15], sel=selectD, out[0..15]=out);

    /* Nebkor's is much more concise. Don't need selection codes. 
       Mux is a selector:
       
    CHIP Mux4Way16 {
      IN a[16], b[16], c[16], d[16], sel[2];
      OUT out[16];

      PARTS:
      // Put your code here:
      Mux16(a=a, b=b, sel=sel[0], out=ab);
      Mux16(a=c, b=d, sel=sel[0], out=cd);

      Mux16(a=ab, b=cd, sel=sel[1], out=out);
    }
    */
}